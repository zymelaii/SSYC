#pragma once

namespace slime::ast {

enum class UnaryOperator {
    Pos,   //<! `+` positive
    Neg,   //<! `-` negative
    Not,   //<! `!` logical not
    Inv,   //<! `~` bitwise inverse
    Paren, //<! `()` (derived)
};

enum class BinaryOperator {
    Subscript, //<! `[]` (derived)
    Mul,       //<! `*` mul
    Div,       //<! `/` div
    Mod,       //<! `%` remainder
    Add,       //<! `+` add
    Sub,       //<! `-` sub
    Shl,       //<! `<<` bitwise shift left
    Shr,       //<! `>>` bitwise shift right
    LT,        //<! `<` less than
    LE,        //<! `<=` less than or equal
    GT,        //<! `>` greater than
    GE,        //<! `>=` greater than or equal
    EQ,        //<! `==` equal
    NE,        //<! `!=` not equal
    And,       //<! `&` bitwise and
    Xor,       //<! `^` xor
    Or,        //<! `|` bitwise or
    LAnd,      //<! `&&` logical and
    LOr,       //<! `||` logical or
    Assign,    //<! `=` assign
    Comma,     //<! `,` (derived)
};

} // namespace slime::ast
